(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{364:function(e,t,a){"use strict";a.r(t);var n=a(45),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"models-and-collections-for-vue-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#models-and-collections-for-vue-js"}},[e._v("#")]),e._v(" Models and Collections for Vue.js")]),e._v(" "),a("h1",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("The relationship between data, component states, and the actions that affect them is a fundamental and unavoidable\nlayer to manage when building a component or application. Vue does not provide a way to structure and encapsulate data,\nso most projects use plain objects and implement their own patterns to communicate with the server.\nThis is perfectly fine for small applications, but can quickly become a lot to manage when the size of\nyour project and team increases.")]),e._v(" "),a("p",[e._v("This library takes care of this for you, providing a single point of entry and a consistent API:")]),e._v(" "),a("ul",[a("li",[e._v("Communicating with the server to "),a("code",[e._v("fetch")]),e._v(", "),a("code",[e._v("save")]),e._v(", and "),a("code",[e._v("delete")]),e._v(".")]),e._v(" "),a("li",[e._v("Managing model states like empty, "),a("code",[e._v("active")]),e._v(" and "),a("code",[e._v("saved")]),e._v(".")]),e._v(" "),a("li",[e._v("Managing component states like "),a("code",[e._v("loading")]),e._v(", "),a("code",[e._v("saving")]),e._v(", and "),a("code",[e._v("deleting")]),e._v(".")])]),e._v(" "),a("p",[e._v("When we started to use Vue more extensively, we noticed that every team had a slightly different\nway of doing this, so we decided to develop a standard solution that is flexible enough to accommodate\nmost use cases in a consistent way, while preserving reactivity and testability.")]),e._v(" "),a("p",[e._v("The basic concept is that of a Model and a Collection of models.\nData and component state is managed automatically, and CRUD is built-in. A classic example would be a to-do list,\nwhere each task would be a model and the list of tasks would be a collection.")]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("p",[e._v("Add the "),a("code",[e._v("@zidadindimon/vue-mc")]),e._v(" package to your package dependencies:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" i @zidadindimon/vue-mc\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);